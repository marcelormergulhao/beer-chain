// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    var barley_upc = 2
    var barley_sku = 2
    var beer_sku = 3
    var beer_upc = 3
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Hops and barley grown with love"
    const productPrice = web3.toWei(1, "ether")
    const finalPrice = web3.toWei(1.1, "ether")
    var itemState = 0
    const brewerID = accounts[5]
    const distributorID = accounts[2]
    const supermarketID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest hops and barley", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem(), assume Hops flow
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation,
                                      originFarmLatitude, originFarmLongitude, productNotes,
                                      {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 

        //Harvest barley this time
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        await supplyChain.harvestItem(barley_upc, originFarmerID, originFarmName, originFarmInformation,
            originFarmLatitude, originFarmLongitude, productNotes,
            {from: originFarmerID})

        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    it("Testing smart contract function maltBarley() that allows a farmer to malt barley", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Malted()
        var event = supplyChain.Malted()
        await event.watch((err, res) => {
            eventEmitted = true
        })


        // Mark an item as Malted by calling function maltBarley()
        await supplyChain.maltBarley(barley_upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    //2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process malted barley and hops", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    }) 

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process malted barley and hops", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as Processed by calling function processBarley()
        await supplyChain.processBarley(barley_upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    }) 

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack grains", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originFarmerID})

        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 

        //Pack barley too
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        await supplyChain.packItem(barley_upc, {from: originFarmerID})

        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell grains", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})

        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

        //check second event too
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        //Now do the same with the barley
        await supplyChain.sellItem(barley_upc, productPrice, {from: originFarmerID})

        //Fetch data
        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy grains", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: brewerID, value: productPrice})

        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
        //check second event too
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        await supplyChain.buyItem(barley_upc, {from: brewerID, value: productPrice})

        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship grains", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, {from: originFarmerID})
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
        //check second event too
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        await supplyChain.shipItem(barley_upc, {from: originFarmerID})
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: brewerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

        //check second event too
        eventEmitted = false
        await event.watch((err, res) => {
            eventEmitted = true
        })
        await supplyChain.receiveItem(barley_upc, {from: brewerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewer ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    it("Testing smart contract function brewBeer() that combines hops and barley into beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var usedEventEmitted = false
        var brewedEventEmitted = false;
        
        // Watch the emitted event Used()
        var usedEvent = supplyChain.Used()
        await usedEvent.watch((err, res) => {
            usedEventEmitted = true
        })
        var brewEvent = supplyChain.Brewed()
        await brewEvent.watch((err, res) => {
            brewEventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.brewBeer(beer_upc, barley_upc, upc, {from: brewerID})

        let resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        let resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')  
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        

        resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)
        resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')     
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')

        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], 0, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 0, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], emptyAddress, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(usedEventEmitted, true, 'Invalid used event emitted')
        assert.equal(brewEventEmitted, true, 'Invalid brew event emitted')
    })    

    it("Testing smart contract function bottleBeer() that allows a brewer to bottle beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Bottled()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.bottleBeer(beer_upc, {from: brewerID})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], 0, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 1, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], emptyAddress, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], emptyAddress, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
    })

    it("Testing smart contract function storeBeer() that allows brewers to store beer bottles on distributors", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Stored()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.storeBeer(beer_upc, distributorID, {from: brewerID})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], 0, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 2, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], emptyAddress, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
    })

    it("Testing smart contract function sellBeer() that allows distributors to sell beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.BeerForSale()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.sellBeer(beer_upc, productPrice, {from: distributorID})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], productPrice, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 3, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], emptyAddress, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
    })

    it("Testing smart contract function buyBeer() that allows supermarkets to buy beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.BeerSold()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyBeer(beer_upc, {from: supermarketID, value: productPrice})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], supermarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], productPrice, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 4, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], supermarketID, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
        
    })

    it("Testing smart contract function shipBeer() that allows distributors to send beer to supermarkets", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Delivered()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipBeer(beer_upc, {from: distributorID})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], supermarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], productPrice, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 5, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], supermarketID, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
    })

    it("Testing smart contract function supermarketSell() that allows supermarkets to sell beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event MarketForSale()
        var event = supplyChain.MarketForSale()
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.supermarketSell(beer_upc, finalPrice, {from: supermarketID})

        //Get data and check state
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], supermarketID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], finalPrice, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 6, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], supermarketID, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], emptyAddress, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err,res) =>{
            eventEmitted = true
        })

        // Mark an item as Sold by calling function purchaseBeer()
        await supplyChain.purchaseBeer(beer_upc, {from: consumerID, value: finalPrice})

        //Get data and check statte
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], finalPrice, 'Error: Invalid price')
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 7, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], supermarketID, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], consumerID, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid used event emitted')
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(barley_upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], brewerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(barley_upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], barley_sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], barley_sku + barley_upc, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid state')
        assert.equal(resultBufferTwo[6], brewerID, 'Error: Invalid brewerID')        
    })

    it("Testing smart contract function fetchItemBufferThree() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(barley_upc)
        
        // Verify the result set:
        assert.equal(resultBufferThree[0], barley_upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferThree[1], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferThree[2], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')     
    })

    it("Testing smart contract function fetchBeerBuffer() that allows anyone to fetch beer details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        //Get data and check statte
        const resultBeerBuffer = await supplyChain.fetchBeerBufferOne(beer_upc)
        assert.equal(resultBeerBuffer[0], beer_sku, 'Error: Invalid item SKU')
        assert.equal(resultBeerBuffer[1], beer_upc, 'Error: Invalid item UPC')
        assert.equal(resultBeerBuffer[2], barley_upc, 'Error: Invalid barley UPC')
        assert.equal(resultBeerBuffer[3], upc, 'Error: Invalid hops UPC')
        assert.equal(resultBeerBuffer[4], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBeerBuffer[5], beer_sku+beer_upc, 'Error: Invalid productID')
        assert.equal(resultBeerBuffer[6], finalPrice, 'Error: Invalid price')

    })

    it("Testing smart contract function fetchBeerBuffer() that allows anyone to fetch beer details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        //Get data and check statte
        const resultBeerBufferTwo = await supplyChain.fetchBeerBufferTwo(beer_upc)
        assert.equal(resultBeerBufferTwo[0], beer_upc, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[1], 7, 'Error: Invalid beer state')
        assert.equal(resultBeerBufferTwo[2], brewerID, 'Error: Invalid brewerID')
        assert.equal(resultBeerBufferTwo[3], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBeerBufferTwo[4], supermarketID, 'Error: Invalid supermarketID')
        assert.equal(resultBeerBufferTwo[5], consumerID, 'Error: Invalid consumerID')
    })

});

